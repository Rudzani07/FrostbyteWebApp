// <auto-generated />
using System;
using FrostbyteWebApp.Data.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FrostbyteWebApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240906020138_new")]
    partial class @new
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FrostbyteWebApp.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("AdminID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientID"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("ClientID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.DeliveryNote", b =>
                {
                    b.Property<int>("DeliveryNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryNoteID"));

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("DeliveryNoteID");

                    b.HasIndex("SupplierID");

                    b.ToTable("DeliveryNotes");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<int>("DepartmentName")
                        .HasColumnType("int");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.InventoryLiaison", b =>
                {
                    b.Property<int>("InventoryLiaisonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryLiaisonID"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("InventoryLiaisonID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("InventoryLiaisons");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("AccountHolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("BankNameID")
                        .HasColumnType("int");

                    b.Property<int>("BankUserBankID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentMethod")
                        .HasColumnType("datetime2");

                    b.Property<int>("SendSupplierRequestForQoutationID")
                        .HasColumnType("int");

                    b.Property<string>("TheirReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YourReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sRFQSendSupplierPmRequestForQoutationID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("BankUserBankID");

                    b.HasIndex("sRFQSendSupplierPmRequestForQoutationID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.PmRequestForQoutation", b =>
                {
                    b.Property<int>("PmRequestForQoutationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PmRequestForQoutationID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PMPurchasingManagerID")
                        .HasColumnType("int");

                    b.Property<int>("PurcasingManagerID")
                        .HasColumnType("int");

                    b.Property<int>("PurchasingRequestID")
                        .HasColumnType("int");

                    b.HasKey("PmRequestForQoutationID");

                    b.HasIndex("PMPurchasingManagerID");

                    b.HasIndex("PurchasingRequestID");

                    b.ToTable("PmrequestForQoutations");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.PurchasingManager", b =>
                {
                    b.Property<int>("PurchasingManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchasingManagerID"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("PurchasingManagerID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("PurchasingManagers");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.PurchasingRequest", b =>
                {
                    b.Property<int>("PurchasingRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchasingRequestID"));

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<float>("EstimatedPrice")
                        .HasColumnType("real");

                    b.Property<int?>("InventoryLiaisonID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("ItemModel")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemSerialNumber")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("PurchasingRequestID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("InventoryLiaisonID");

                    b.ToTable("PurchasingRequest");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.SendDeliveryNote", b =>
                {
                    b.Property<int>("SendDeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SendDeliveryID"));

                    b.Property<int>("OrdersOrderID")
                        .HasColumnType("int");

                    b.Property<int>("OrdrID")
                        .HasColumnType("int");

                    b.Property<int>("PRPurchasingRequestID")
                        .HasColumnType("int");

                    b.Property<int>("PurchasingManagerID")
                        .HasColumnType("int");

                    b.HasKey("SendDeliveryID");

                    b.HasIndex("OrdersOrderID");

                    b.HasIndex("PRPurchasingRequestID");

                    b.HasIndex("PurchasingManagerID");

                    b.ToTable("SendDeliveryNotes");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.SendOrder", b =>
                {
                    b.Property<int>("SendOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SendOrderID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("SendOrderID");

                    b.HasIndex("OrderID");

                    b.HasIndex("SupplierID");

                    b.ToTable("SendOrders");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.SendPmRequestForQuotation", b =>
                {
                    b.Property<int>("SendPmRequestForQoutationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SendPmRequestForQoutationID"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PmRequestForQoutationID")
                        .HasColumnType("int");

                    b.Property<int>("PmRequestForQuotationID")
                        .HasColumnType("int");

                    b.Property<string>("ResponseLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("SendPmRequestForQoutationID");

                    b.HasIndex("PmRequestForQoutationID");

                    b.HasIndex("SupplierID");

                    b.ToTable("SendPmRequestForQuotation");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.SendPurchasingRequest", b =>
                {
                    b.Property<int>("SendPurchasingRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SendPurchasingRequestID"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PurchasingRequestID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("SendPurchasingRequestID");

                    b.HasIndex("PurchasingRequestID");

                    b.HasIndex("SupplierID");

                    b.ToTable("SendPurchasingRequests");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.SendSupplierRequestForQuotation", b =>
                {
                    b.Property<int>("SendSupplierPmRequestForQoutationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SendSupplierPmRequestForQoutationID"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PurchasingManagerID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierRequestForQoutationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("SendSupplierPmRequestForQoutationID");

                    b.HasIndex("PurchasingManagerID");

                    b.HasIndex("SupplierRequestForQoutationID");

                    b.ToTable("SendSupplierRequestForQuotations");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.SupplierRequestForQoutation", b =>
                {
                    b.Property<int>("SupplierRequestForQuotationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierRequestForQuotationID"));

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliverySpecification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedPrice")
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemModel")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemSerialNumber")
                        .HasColumnType("int");

                    b.Property<string>("PaymentSpecifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QoutedPrice")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("TermsCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("SupplierRequestForQuotationID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("SupplierRequestForQuotations");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.UserBank", b =>
                {
                    b.Property<int>("UserBankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserBankID"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchCodeName")
                        .HasColumnType("int");

                    b.HasKey("UserBankID");

                    b.ToTable("Banks1");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.UserType", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<int?>("AdminID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryLiaisonID")
                        .HasColumnType("int");

                    b.Property<int?>("PurchasingManagerID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("AdminID");

                    b.HasIndex("ClientID");

                    b.HasIndex("InventoryLiaisonID");

                    b.HasIndex("PurchasingManagerID");

                    b.HasIndex("SupplierID");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "97310d92-0d0e-42a8-b9e4-ff4b388355de",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "bcb8e408-b9c7-4196-8741-6734cad93308",
                            Name = "client",
                            NormalizedName = "client"
                        },
                        new
                        {
                            Id = "d25cb9ca-66e8-4bc9-b0c5-b6f56400ca44",
                            Name = "PurchaseManager",
                            NormalizedName = "PurchasingManager"
                        },
                        new
                        {
                            Id = "8e5f65b2-e6f8-4199-a940-e2611fa158d5",
                            Name = "InventoryLiaison",
                            NormalizedName = "InventoryLiaison"
                        },
                        new
                        {
                            Id = "167343bb-552c-47d8-afc4-27c75aefc17e",
                            Name = "supplier",
                            NormalizedName = "supplier"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.Admin", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.Department", "Dep")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dep");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.DeliveryNote", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.Supplier", "S")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("S");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.InventoryLiaison", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.Department", "DepID")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepID");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.Order", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.UserBank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankUserBankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.SendSupplierRequestForQuotation", "sRFQ")
                        .WithMany()
                        .HasForeignKey("sRFQSendSupplierPmRequestForQoutationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("sRFQ");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.PmRequestForQoutation", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.PurchasingManager", "PM")
                        .WithMany()
                        .HasForeignKey("PMPurchasingManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.PurchasingRequest", "PR")
                        .WithMany()
                        .HasForeignKey("PurchasingRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PM");

                    b.Navigation("PR");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.PurchasingManager", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.Department", "D")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("D");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.PurchasingRequest", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.Department", "D")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.InventoryLiaison", "Inv")
                        .WithMany()
                        .HasForeignKey("InventoryLiaisonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("D");

                    b.Navigation("Inv");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.SendDeliveryNote", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.Order", "Orders")
                        .WithMany()
                        .HasForeignKey("OrdersOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.PurchasingRequest", "PR")
                        .WithMany()
                        .HasForeignKey("PRPurchasingRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.PurchasingManager", "PM")
                        .WithMany()
                        .HasForeignKey("PurchasingManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("PM");

                    b.Navigation("PR");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.SendOrder", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.Order", "O")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.Supplier", "S")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("O");

                    b.Navigation("S");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.SendPmRequestForQuotation", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.PmRequestForQoutation", "PM")
                        .WithMany()
                        .HasForeignKey("PmRequestForQoutationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.Supplier", "S")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PM");

                    b.Navigation("S");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.SendPurchasingRequest", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.PurchasingRequest", "PR")
                        .WithMany()
                        .HasForeignKey("PurchasingRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.Supplier", "S")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PR");

                    b.Navigation("S");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.SendSupplierRequestForQuotation", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.PurchasingManager", "PM")
                        .WithMany()
                        .HasForeignKey("PurchasingManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.SupplierRequestForQoutation", "SRFQ")
                        .WithMany()
                        .HasForeignKey("SupplierRequestForQoutationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PM");

                    b.Navigation("SRFQ");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.SupplierRequestForQoutation", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.Department", "D")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("D");
                });

            modelBuilder.Entity("FrostbyteWebApp.Models.UserType", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.Admin", "Ad")
                        .WithMany()
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.InventoryLiaison", "Inv")
                        .WithMany()
                        .HasForeignKey("InventoryLiaisonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.PurchasingManager", "Pum")
                        .WithMany()
                        .HasForeignKey("PurchasingManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.Supplier", "Sup")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");

                    b.Navigation("Client");

                    b.Navigation("Inv");

                    b.Navigation("Pum");

                    b.Navigation("Sup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostbyteWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FrostbyteWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
